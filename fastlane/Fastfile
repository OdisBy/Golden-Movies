# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

DEBUG = 'debug'
RELEASE = 'release'

platform :android do
  desc 'Runs all the tests'
  lane :test do
    gradle(
      task: 'test assemble',
      build_type: 'Debug',
      print_command: true
    )
  rescue StandardError => e
    raise e unless e.message.include?('FAILURE: Build failed with an exception.')

    UI.important('Test Lane has failed on gradle task!')
  end

  desc 'Build Debug and Deploy to Github'
  lane :build_debug do
    begin
      environment = DEBUG

      version_name, changelog = generate_changelog(
        environment: environment
      )

      UI.important("Version name is #{version_name}")
      UI.important("Changelog is #{changelog}")


      version_code = ENV['GITHUB_RUNNER_NUMBER']
      api_key = ENV['DEBUG_API_KEY']

      local_properties = {
        'CI_VERSION_NAME' => version_name,
        'CI_VERSION_CODE' => version_code
      }

      api_key_properties = {
        'API_KEY' => api_key
      }

      File.open('../local.properties', 'a') do |file|
        local_properties.each do |key, value|
          file.puts("#{key}=#{value}")
        end
      end

      File.open('../apikey.properties', 'w') do |file|
        api_key_properties.each do |key, value|
          file.puts("#{key}=#{value}")
        end
      end
    rescue StandardError => e
      UI.important('Debug lane has failed on create properties')
      raise e
    end

    begin
      gradle(
        task: 'assemble',
        build_type: 'Debug',
        print_command: false
      )
    rescue StandardError => e
      raise e unless e.message.include?('FAILURE: Build failed with an exception.')

      UI.important('Debug lane has failed on gradle task')
    end

    begin
      set_github_release(
        repository_name: 'OdisBy/Golden-Movies',
        api_bearer: ENV['GITHUB_TOKEN'],
        name: "Debug #{version_name}",
        tag_name: "#{DEBUG}/#{version_name}",
        description: changelog,
        commitish: 'develop',
        upload_assets: ['./app/build/outputs/apk/debug/app-debug.apk']
      )
    rescue StandardError => e
      UI.important('Failed to publish it to Github')
      raise e
    end
  end

  desc 'Deploy a new version to the Google Play'
  lane :build_release do
    begin
      environment = RELEASE

      version_name, changelog = generate_changelog(
        environment: environment
      )

      UI.important("Version name is #{version_name}")
      UI.important("Changelog is #{changelog}")


      version_code = ENV['GITHUB_RUNNER_NUMBER']
      api_key = ENV['DEBUG_API_KEY']

      local_properties = {
        'CI_VERSION_NAME' => version_name,
        'CI_VERSION_CODE' => version_code
      }

      api_key_properties = {
        'API_KEY' => api_key
      }

      File.open('../local.properties', 'a') do |file|
        local_properties.each do |key, value|
          file.puts("#{key}=#{value}")
        end
      end

      File.open('../apikey.properties', 'w') do |file|
        api_key_properties.each do |key, value|
          file.puts("#{key}=#{value}")
        end
      end
    rescue StandardError => e
      UI.important('Release lane has failed on create properties')
      raise e
    end

    begin
      gradle(
        task: 'bundle',
        build_type: 'Release',
        print_command: false
      )
    rescue StandardError => e
      raise e unless e.message.include?('FAILURE: Build failed with an exception.')

      UI.important('Release lane has failed on bundle gradle task')
    end

    bundle_path = Actions.lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH]
    bundle_mapping_path = Actions.lane_context[SharedValues::GRADLE_MAPPING_TXT_OUTPUT_PATH]

    begin
      gradle(
        task: 'assemble',
        build_type: 'Release',
        print_command: false
      )
    rescue StandardError => e
      raise e unless e.message.include?('FAILURE: Build failed with an exception.')

      UI.important('Release lane has failed on assemble gradle task')
    end

    apk_path = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]

    begin
      set_github_release(
        repository_name: 'OdisBy/Golden-Movies',
        api_bearer: ENV['GITHUB_TOKEN'],
        name: "Release #{version_name}",
        tag_name: "#{RELEASE}/#{version_name}",
        description: changelog,
        commitish: 'main',
        upload_assets: apk_path
      )
    rescue StandardError => e
      UI.important('Failed to publish it to Github')
      raise e
    end

    begin
      upload_to_play_store(
        package_name: 'com.aetherinsight.goldentomatoes',
        track: 'internal',
        version_name: version_name,
        version_code: version_code,
        mapping: bundle_mapping_path,
        apk: bundle_path,
        json_key: 'app/play_store.json'
      )
    rescue StandardError => e
      UI.important('Failed to publish it to Github')
      raise e
    end
  end

  desc 'Generate tag and changelog by semantic versioning 2.0.0'
  private_lane :generate_changelog do |options|
    # Parameters:
    #   :environment (String): The environment.
    # Output:
    #   [String, String]: The next version and the changelog.
    # Function:
    #   This lane generates the next version and changelog based on semantic versioning.

    environment = options[:environment]
    git_pull(only_tags: true)

    analyze_commits(
      match: "#{environment}/*"
    )

    next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]

    changelog = conventional_changelog(
      title: "Android #{environment}",
      display_author: false,
      display_links: false,
      debug: false
    )

    [next_version, changelog]
  rescue StandardError => e
    UI.important('Lane failed on search version semantic')
    raise e
  end
end
